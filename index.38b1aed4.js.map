{"mappings":"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","sources":["src/apikeys.ts","src/script.ts"],"sourcesContent":["const apiKey: string = 'bef1fd4f352d760bcd80a36b1b00d723';\r\n\r\nexport {apiKey};","import { apiKey } from \"./apikeys\";\r\n\r\n//caching the dom\r\n\r\nconst temperatureDisplay = document.getElementById('temperature-display');\r\nconst dateDisplay = document.getElementById('date-display');\r\nconst townName = document.getElementById('city-display');\r\nconst inputField = document.querySelector('.main__search__searchbar');\r\nconst submitButton = document.querySelector('.main__search__submit-button');\r\nconst weatherDescribed = document.querySelector('.weather-description');\r\n\r\nconst prediction1Parent = document.getElementById('day1');\r\nconst prediction2Parent = document.getElementById('day2');\r\nconst prediction3Parent = document.getElementById('day3');\r\nconst prediction4Parent = document.getElementById('day4');\r\n\r\n\r\nconst prediction1 = prediction1Parent.querySelector('.tempterature-display-prediction-number');\r\nconst prediction2 = prediction2Parent.querySelector('.tempterature-display-prediction-number');\r\nconst prediction3 = prediction3Parent.querySelector('.tempterature-display-prediction-number');\r\nconst prediction4 = prediction4Parent.querySelector('.tempterature-display-prediction-number');\r\n\r\n\r\nconst prediction1Display = prediction1Parent.querySelector('.prediction-date');\r\nconst prediction2Display = prediction2Parent.querySelector('.prediction-date');\r\nconst prediction3Display = prediction3Parent.querySelector('.prediction-date');\r\nconst prediction4Display = prediction4Parent.querySelector('.prediction-date');\r\n\r\n\r\n\r\n//loading screen \r\nloading();\r\n\r\nconst header = document.querySelector(\"header\");\r\nconst main = document.querySelector(\"main\");\r\nconst footer = document.querySelector(\"footer\");\r\nconst loader = document.getElementById(\"loader\");\r\n\r\n\r\nfunction loading() {\r\n    setTimeout(() => {\r\n        loader.style.opacity = '0';\r\n        loader.style.display = 'none';\r\n        \r\n        weatherApp.getDate();\r\n        setTimeout(() => (header.style.opacity = '100'), 100);\r\n        setTimeout(() => (main.style.opacity = '100'), 300);\r\n        setTimeout(() => (footer.style.opacity = '100'), 500);\r\n    }, 2500);\r\n}\r\n\r\n\r\n//event listeners for submit button + enter\r\n\r\ndocument.addEventListener('keyup', function(event) {\r\n    if (event.key === \"Enter\") {\r\n        weatherApp.getDate();\r\n        weatherApp.fetchWeather();\r\n        \r\n    }\r\n})\r\n\r\nsubmitButton.addEventListener('click', function() {\r\n    weatherApp.getDate();\r\n    weatherApp.fetchWeather();\r\n    \r\n});\r\n\r\n//app object\r\n\r\nconst weatherApp = {\r\n    _apiKey: apiKey,\r\n\r\n    _city: \"\",\r\n\r\n    _userInput: \"\",\r\n\r\n    _responseJson: {},\r\n\r\n    _currentWeather: '',\r\n\r\n    _currentTemperature: 0,\r\n\r\n    _date: '',\r\n\r\n    _icon: '',\r\n\r\n    _weatherDescription: '',\r\n\r\n    get apiKey() {\r\n        return this._apiKey;\r\n    },\r\n\r\n    get city() {\r\n        return this._city;\r\n    },\r\n\r\n    get userInput() {\r\n        return this._userInput;\r\n    },\r\n\r\n    get responseJson() {\r\n        return this._responseJson;\r\n    },\r\n\r\n    get currentWeather() {\r\n        return this._currentWeather;\r\n    },\r\n\r\n    get currentTemperature() {\r\n        return this._currentTemperature;\r\n    },\r\n\r\n    get date() {\r\n        return this._date;\r\n    },\r\n\r\n    get icon() {\r\n        return this._icon;\r\n    },\r\n\r\n    get weatherDescription() {\r\n        return this._weatherDescription;\r\n    },\r\n\r\n    set weatherDescription(description) {\r\n        this._weatherDescription = description;\r\n    },\r\n\r\n    set icon(icon) {\r\n        this._icon = icon;\r\n    },\r\n\r\n    set date(date) {\r\n        this._date = date;\r\n    },\r\n\r\n    set currentTemperature(temp) {\r\n        this._currentTemperature = temp;\r\n    },\r\n\r\n    set currentWeather(weather) {\r\n        this._currentWeather = weather;\r\n    },\r\n\r\n    set responseJson(newResponse) {\r\n        this._responseJson = newResponse;\r\n    },\r\n\r\n    set city(userInputCity) {\r\n        this._city = userInputCity;\r\n    },\r\n\r\n\r\n    fetchWeather() {\r\n        let inputCity: string = (<HTMLInputElement>inputField).value;      \r\n        this._city = inputCity; \r\n        let townNameUppercased = inputCity.charAt(0).toLocaleUpperCase() + inputCity.slice(1);  //good enough for now           \r\n        townName.innerHTML = townNameUppercased;\r\n        let apiResponse = fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${this._city}&appid=${this._apiKey}`)\r\n            \r\n            .then((response) => response.json())\r\n            .then((data) => this.filterJson(data))\r\n            .catch((error) => console.log(`Request failed with reason: ${error}`))\r\n    },\r\n\r\n    filterJson(obj) {\r\n        \r\n        this._responseJson = obj;\r\n        let tempArrDay1 = [];\r\n        let tempArrDay2 = [];\r\n        let tempArrDay3 = [];\r\n        let tempArrDay4 = [];\r\n        let tempTimeArr = [];\r\n\r\n        let initialDate = this._date; //to decide the date\r\n        \r\n        for(let i = 0; i < obj.list.length; i++) {\r\n            if(i == 0) { //separate the first one and display it on screen\r\n                \r\n                \r\n                let currentObject = obj.list[0]; // to obtain the initial temperature to be displayed \r\n                this.getWeatherDescription(currentObject);\r\n                weatherDescribed.innerHTML = this._weatherDescription;\r\n                let currentTemp = currentObject.main.temp;\r\n                this._currentTemperature = Math.floor(currentTemp - 273.15); //kelvin to celsius with no float\r\n                \r\n                this.showTemp(temperatureDisplay);\r\n            } else {\r\n                \r\n                let timeStampToCheck: string = obj.list[i].dt_txt;\r\n                let tempStampToCheck: number = obj.list[i].main.temp;\r\n                \r\n                let tempTimeStamp = [timeStampToCheck, tempStampToCheck];\r\n                tempTimeArr.push(tempTimeStamp);\r\n            }\r\n  \r\n        }\r\n        \r\n        //tested\r\n        for(let j = 0; j < tempTimeArr.length; j++) { \r\n            let stringArr = tempTimeArr[j][0].split('');\r\n            let firstDigitDate = stringArr[8]; // again, getting the day date\r\n            let secondDigitDate = stringArr[9];\r\n            let firstDigitHour = stringArr[11];\r\n            let secondDigitHour = stringArr[12];\r\n            \r\n            let dateCheck: number = parseInt(`${firstDigitDate}${secondDigitDate}`);\r\n            let hourCheck: number = parseInt(`${firstDigitHour}${secondDigitHour}`);\r\n            \r\n            \r\n            //arrays to calculate average temp \r\n\r\n            //if tree to check which date we are dealing with\r\n\r\n            if(dateCheck == (initialDate + 1)) {\r\n                if(hourCheck > 7 && hourCheck < 22) {\r\n                    tempArrDay1.push(tempTimeArr[j][1]);                \r\n                }\r\n            }\r\n            if(dateCheck === initialDate + 2) {\r\n                if(hourCheck > 7 && hourCheck < 22) {\r\n                    tempArrDay2.push(tempTimeArr[j][1]);\r\n                }\r\n            }\r\n            if(dateCheck === initialDate + 3) {\r\n                if(hourCheck > 7 && hourCheck < 22) {\r\n                    tempArrDay3.push(tempTimeArr[j][1]);\r\n                }\r\n            }\r\n            if(dateCheck === initialDate + 4) {\r\n                if(hourCheck > 7 && hourCheck < 22) {\r\n                    tempArrDay4.push(tempTimeArr[j][1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let averageTempDay1 = () => {\r\n            let total = 0;\r\n            for(let l = 0; l < tempArrDay1.length; l++) {\r\n                let convertCtK = Math.floor(tempArrDay1[l] - 273.15);\r\n                total += convertCtK;\r\n            }\r\n            return Math.floor(total / (tempArrDay1.length - 1)); //getting average and tranferring k to c, same for following\r\n        };\r\n        \r\n        let averageTempDay2 = () => {\r\n            let total = 0;\r\n            for(let l = 0; l < tempArrDay2.length; l++) {\r\n                let convertCtK = tempArrDay2[l] - 273.15;\r\n                total += convertCtK;\r\n            }\r\n            return Math.floor(total/(tempArrDay2.length -1));\r\n        };\r\n        \r\n        let averageTempDay3 = () => {\r\n            let total = 0;\r\n            for(let l = 0; l < tempArrDay3.length; l++) {\r\n                let convertCtK = tempArrDay3[l] - 273.15;\r\n                total += convertCtK;\r\n            }\r\n            return Math.floor(total/(tempArrDay3.length - 1));\r\n        };\r\n\r\n        let averageTempDay4 = () => {\r\n            let total = 0;\r\n            for(let l = 0; l < tempArrDay4.length; l++) {\r\n                let convertCtK = tempArrDay4[l] - 273.15;\r\n                total += convertCtK;\r\n            }\r\n            return Math.floor(total/(tempArrDay4.length - 1));\r\n        };\r\n\r\n        //display average\r\n        this.showTemp(prediction1, averageTempDay1());\r\n        this.showTemp(prediction2, averageTempDay2());\r\n        this.showTemp(prediction3, averageTempDay3());\r\n        this.showTemp(prediction4, averageTempDay4());\r\n\r\n\r\n    },\r\n\r\n    //presentation based on data\r\n\r\n    showTemp(element, averageTemperature: number) {\r\n        let theme = '';\r\n        if(averageTemperature == undefined) {\r\n            if(averageTemperature < 5) {\r\n                theme = 'blue';\r\n            }\r\n            if(averageTemperature < 20) {\r\n                theme = 'green';\r\n            }\r\n            if(averageTemperature < 30) {\r\n                theme = 'yellow';\r\n            }\r\n            if(averageTemperature > 30) {\r\n                theme = 'red';\r\n            }\r\n        }\r\n        let temperature = 0;\r\n        if(averageTemperature) { //this will be provded for all but first element\r\n            temperature = averageTemperature;\r\n            element.innerText = `${temperature}`;\r\n            return;\r\n        }\r\n        temperature = this._currentTemperature;\r\n        element.innerHTML = `${temperature}°`;\r\n    },\r\n\r\n    getDate() {\r\n        let currentDate = new Date();\r\n        let day = currentDate.getDate();\r\n        let month = currentDate.getMonth() + 1;\r\n        let monthStr = '';\r\n        let year = currentDate.getFullYear();\r\n        \r\n        this._date = day;\r\n        \r\n        switch(month) {\r\n            case 1:\r\n                monthStr = 'January';\r\n                break;\r\n            case 2:\r\n                monthStr = 'February';\r\n                break;\r\n            case 3:\r\n                monthStr = 'March';\r\n                break;\r\n            case 4:\r\n                monthStr = 'April';\r\n                break;\r\n            case 5:\r\n                monthStr = 'May';\r\n                break;\r\n            case 6:\r\n                monthStr = 'June';\r\n                break;\r\n            case 7:\r\n                monthStr = 'July';\r\n                break;\r\n            case 8:\r\n                monthStr = 'August';\r\n                break;\r\n            case 9:\r\n                monthStr = 'September';\r\n                break;\r\n            case 10:\r\n                monthStr = 'October';\r\n                break;\r\n            case 11:\r\n                monthStr = 'November';\r\n                break;\r\n            case 12:\r\n                monthStr = 'December';\r\n                break;\r\n        }\r\n\r\n        dateDisplay.innerHTML = `${day} ${monthStr} ${year}`\r\n        prediction1Display.innerHTML = `${day + 1} ${monthStr}`;\r\n        prediction2Display.innerHTML = `${day + 2} ${monthStr}`;\r\n        prediction3Display.innerHTML = `${day + 3} ${monthStr}`;\r\n        prediction4Display.innerHTML = `${day + 4} ${monthStr}`;\r\n        \r\n    },\r\n\r\n    getWeatherDescription(obj) { //html not yet implemented\r\n        let weatherState: string = obj.weather[0].description;\r\n        console.log(weatherState);\r\n        this._weatherDescription = weatherState;\r\n    }\r\n}\r\n\r\n//icons to use\r\n\r\n//wb_sunny\r\n//wb_cloudy\r\n//water_drop\r\n//air\r\n//thunderstorm\r\n"],"names":["$0f592d681121713f$var$temperatureDisplay","document","getElementById","$0f592d681121713f$var$dateDisplay","$0f592d681121713f$var$townName","$0f592d681121713f$var$inputField","querySelector","$0f592d681121713f$var$submitButton","$0f592d681121713f$var$weatherDescribed","$0f592d681121713f$var$prediction1Parent","$0f592d681121713f$var$prediction2Parent","$0f592d681121713f$var$prediction3Parent","$0f592d681121713f$var$prediction4Parent","$0f592d681121713f$var$prediction1","$0f592d681121713f$var$prediction2","$0f592d681121713f$var$prediction3","$0f592d681121713f$var$prediction4","$0f592d681121713f$var$prediction1Display","$0f592d681121713f$var$prediction2Display","$0f592d681121713f$var$prediction3Display","$0f592d681121713f$var$prediction4Display","setTimeout","$0f592d681121713f$var$loader","style","opacity","display","$0f592d681121713f$var$weatherApp","getDate","$0f592d681121713f$var$header","$0f592d681121713f$var$main","$0f592d681121713f$var$footer","addEventListener","event","key","fetchWeather","_apiKey","_city","_userInput","_responseJson","_currentWeather","_currentTemperature","_date","_icon","_weatherDescription","apiKey","this","city","userInput","responseJson","currentWeather","currentTemperature","date","icon","weatherDescription","description","temp","weather","newResponse","userInputCity","inputCity","value","townNameUppercased","charAt","toLocaleUpperCase","slice","innerHTML","fetch","then","response","json","data","filterJson","catch","error","console","log","obj","tempArrDay1","tempArrDay2","tempArrDay3","tempArrDay4","tempTimeArr","initialDate","i","list","length","currentObject","getWeatherDescription","currentTemp","main","Math","floor","showTemp","tempTimeStamp","dt_txt","push","j","stringArr","split","firstDigitDate","secondDigitDate","firstDigitHour","secondDigitHour","dateCheck","parseInt","hourCheck","total","l","averageTempDay1","averageTempDay2","averageTempDay3","averageTempDay4","element","averageTemperature","theme","undefined","temperature","innerText","currentDate","Date","day","month","getMonth","monthStr","year","getFullYear","weatherState"],"version":3,"file":"index.38b1aed4.js.map"}